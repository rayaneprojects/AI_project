import sqlite3
import tkinter as tk
from tkinter import messagebox

# Create SQLite database
conn = sqlite3.connect("bank.db")
cursor = conn.cursor()

# Create accounts table
cursor.execute('''
CREATE TABLE IF NOT EXISTS accounts (
    account_number INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    password TEXT NOT NULL,
    balance REAL DEFAULT 0.0
)
''')

# Create transactions table
cursor.execute('''
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    account_number INTEGER,
    type TEXT,
    amount REAL,
    FOREIGN KEY(account_number) REFERENCES accounts(account_number)
)
''')
conn.commit()

# Register new user
def register():
    name = entry_name.get()
    password = entry_password.get()
    
    if name and password:
        cursor.execute("INSERT INTO accounts (name, password) VALUES (?, ?)", (name, password))
        conn.commit()
        messagebox.showinfo("Success", "Account registered successfully!")
        login_window()
    else:
        messagebox.showerror("Error", "All fields must be filled!")

# Login function
def login():
    account_number = entry_login_account.get()
    password = entry_login_password.get()
    
    cursor.execute("SELECT * FROM accounts WHERE account_number = ? AND password = ?", (account_number, password))
    user = cursor.fetchone()
    
    if user:
        banking_window(user)
    else:
        messagebox.showerror("Error", "Invalid account number or password!")

# Banking operations window
def banking_window(user):
    root.withdraw()
    bank_window = tk.Toplevel()
    bank_window.title(f"Bank Account - {user[1]}")
    
    def update_balance():
        cursor.execute("SELECT balance FROM accounts WHERE account_number = ?", (user[0],))
        balance = cursor.fetchone()[0]
        balance_label.config(text=f"Balance: {balance} $")
    
    def deposit():
        amount = float(entry_amount.get())
        cursor.execute("UPDATE accounts SET balance = balance + ? WHERE account_number = ?", (amount, user[0]))
        cursor.execute("INSERT INTO transactions (account_number, type, amount) VALUES (?, 'Deposit', ?)", (user[0], amount))
        conn.commit()
        update_balance()
        messagebox.showinfo("Success", "Deposit successful!")
    
    def withdraw():
        amount = float(entry_amount.get())
        cursor.execute("SELECT balance FROM accounts WHERE account_number = ?", (user[0],))
        balance = cursor.fetchone()[0]
        
        if amount > balance:
            messagebox.showerror("Error", "Insufficient funds!")
        else:
            cursor.execute("UPDATE accounts SET balance = balance - ? WHERE account_number = ?", (amount, user[0]))
            cursor.execute("INSERT INTO transactions (account_number, type, amount) VALUES (?, 'Withdraw', ?)", (user[0], amount))
            conn.commit()
            update_balance()
            messagebox.showinfo("Success", "Withdrawal successful!")

    balance_label = tk.Label(bank_window, text=f"Balance: {user[3]} $", font=("Arial", 14))
    balance_label.pack(pady=10)

    entry_amount = tk.Entry(bank_window, width=20)
    entry_amount.pack(pady=5)

    deposit_button = tk.Button(bank_window, text="Deposit", command=deposit)
    deposit_button.pack(pady=5)

    withdraw_button = tk.Button(bank_window, text="Withdraw", command=withdraw)
    withdraw_button.pack(pady=5)

    update_balance()
    bank_window.mainloop()

# Main Login/Register Window
root = tk.Tk()
root.title("Banking System")

tk.Label(root, text="Name:").pack()
entry_name = tk.Entry(root)
entry_name.pack()

tk.Label(root, text="Password:").pack()
entry_password = tk.Entry(root, show="*")
entry_password.pack()

register_button = tk.Button(root, text="Register", command=register)
register_button.pack()

tk.Label(root, text="Login").pack()

tk.Label(root, text="Account Number:").pack()
entry_login_account = tk.Entry(root)
entry_login_account.pack()

tk.Label(root, text="Password:").pack()
entry_login_password = tk.Entry(root, show="*")
entry_login_password.pack()

login_button = tk.Button(root, text="Login", command=login)
login_button.pack()

root.mainloop()
